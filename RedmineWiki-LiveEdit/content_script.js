// Generated by CoffeeScript 1.11.0
(function() {
  var url;

  url = location.href;

  if (/redmine/.test(url) && (/\/edit$/.test(url) || /\/edit\?.+$/.test(url))) {
    chrome.extension.sendRequest({}, function(response) {});
    (function(document, xhr) {
      var LiveEdit, inlineCSS, liveEdit, styleSheet;
      styleSheet = document.createElement("style");
      inlineCSS = ".jstEditor { overflow: hidden; float: none; display: inline-block; } #content_text { box-sizing: border-box; position: relative; float: left; height: 89.5vh; max-height: 90vh; } #preview { padding-left: 10px; float: right; height: 89.5vh; max-height: 90vh; overflow: scroll; } #preview fieldset { margin-top: 0; } #preview legend { display: none; } .view_toggle input { display: none; } .view_toggle label { display: block; float: left; cursor: pointer; width: 80px; margin: 0; padding: 12px 5px; border-right: 1px solid #abb2b7; background: #bdc3c7; color: #555e64; font-size: 14px; text-align: center; line-height: 1; transition: .2s; } .view_toggle label:first-of-type { border-radius: 3px 0 0 3px; } .view_toggle label:last-of-type { border-right: 0px; border-radius: 0 3px 3px 0; } .view_toggle input[type=\"checkbox\"]:checked + label { background-color: #a1b91d; color: #fff; }";
      LiveEdit = (function() {
        function LiveEdit() {
          this.form = document.getElementById("wiki_form");
          this.editor = document.getElementById("content_text");
          this.origPreview = document.getElementById("preview");
          this.preview = this.origPreview.cloneNode();
          this.keyTimerId = null;
          this.origValues = (function(_this) {
            return function(p) {
              var excuted, params, regex, target;
              target = p[p.length - 1].getElementsByTagName("a")[0];
              params = target.getAttribute("onclick");
              if (/^new\sajax\.updater/i.test(params)) {
                regex = /\(\'\w+\',\s\'(.+\/preview)\',\s.+encodeURIComponent\(\'(.+)\'\)/g;
                excuted = regex.exec(params);
                return {
                  url: excuted[1],
                  token: encodeURIComponent(excuted[2])
                };
              } else {
                regex = /\w+\(\"(.+\/preview)\"\,\s/g;
                excuted = regex.exec(params);
                return {
                  url: excuted[1],
                  token: _this.form.authenticity_token["value"]
                };
              }
            };
          })(this)(this.form.getElementsByTagName("p"));
          this.baseParams = (function(_this) {
            return function(i) {
              var input, params;
              input = _this.form.getElementsByTagName("input");
              params = [];
              while (i < input.length) {
                params.push(_this.serializer(input[i]));
                i++;
              }
              params.push("authenticity_token=" + _this.origValues.token);
              return params.join("&");
            };
          })(this)(0);
          this.initElement();
          this.observeKeyEvent();
          this.addViewToggle();
        }

        LiveEdit.prototype.initElement = function() {
          this.editor.parentNode.appendChild(this.preview);
          this.origPreview.parentNode.removeChild(this.origPreview);
          styleSheet.innerText = inlineCSS;
          document.body.appendChild(styleSheet);
          return this.updatePreview();
        };

        LiveEdit.prototype.observeKeyEvent = function() {
          return this.editor.addEventListener("keyup", (function(_this) {
            return function() {
              clearTimeout(_this.keyTimerId);
              return _this.keyTimerId = setTimeout(function() {
                return _this.updatePreview();
              }, 1000);
            };
          })(this), false);
        };

        LiveEdit.prototype.serializer = function(element) {
          var key, val;
          key = encodeURIComponent(element["name"]).replace(/%20/g, "+");
          val = element["value"].replace(/(\r)?\n/g, "\r\n");
          val = encodeURIComponent(val).replace(/%20/g, "+");
          return key + "=" + val;
        };

        LiveEdit.prototype.updatePreview = function() {
          var callback, loader;
          loader = document.getElementById("ajax-indicator");
          callback = (function(_this) {
            return function() {
              _this.editor.style.minHeight = _this.preview.offsetHeight + "px";
              return loader.style.display = "none";
            };
          })(this);
          return (function(_this) {
            return function(textContent) {
              xhr.onreadystatechange = function() {
                if (xhr.readyState === 4 && xhr.status === 200) {
                  _this.preview.innerHTML = xhr.responseText;
                  return callback();
                } else {
                  return loader.style.display = "block";
                }
              };
              xhr.open("post", _this.origValues.url, true);
              xhr.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");
              return xhr.send(_this.baseParams + "&" + textContent);
            };
          })(this)(this.serializer(this.editor));
        };

        LiveEdit.prototype.addViewToggle = function() {
          var checkBox1, checkBox2, content_text, div, label1, label2, parent, preview;
          preview = document.getElementById('preview');
          content_text = document.getElementById('content_text');
          parent = document.getElementsByClassName('box tabular')[0];
          div = document.createElement('div');
          div.setAttribute('class', 'view_toggle');
          div.style.display = 'inline-block';
          parent.insertBefore(div, document.getElementsByClassName('jstEditor')[0]);
          checkBox1 = document.createElement('input');
          checkBox1.setAttribute('type', 'checkbox');
          checkBox1.setAttribute('id', 'toggle_content_text');
          checkBox1.checked = true;
          label1 = document.createElement('label');
          label1.setAttribute('for', 'toggle_content_text');
          label1.innerHTML = 'Editor';
          checkBox2 = document.createElement('input');
          checkBox2.setAttribute('type', 'checkbox');
          checkBox2.setAttribute('id', 'toggle_preview');
          checkBox2.checked = true;
          label2 = document.createElement('label');
          label2.setAttribute('for', 'toggle_preview');
          label2.innerHTML = 'Preview';
          checkBox1.onchange = (function(_this) {
            return function() {
              if (checkBox1.checked && !checkBox2.checked) {
                content_text.style.width = '95vw';
                content_text.style.display = 'block';
                preview.style.width = '0';
                return preview.style.display = 'none';
              } else if (!checkBox1.checked && checkBox2.checked) {
                content_text.style.width = '0';
                content_text.style.display = 'none';
                preview.style.width = '95vw';
                return preview.style.display = 'block';
              } else if (checkBox1.checked && checkBox2.checked) {
                content_text.style.width = '29.5vw';
                content_text.style.display = 'block';
                preview.style.width = 'calc(69.5vw - 48px)';
                return preview.style.display = 'block';
              } else {
                preview.style.display = 'none';
                return content_text.style.display = 'none';
              }
            };
          })(this);
          checkBox2.onchange = (function(_this) {
            return function() {
              if (checkBox2.checked && !checkBox1.checked) {
                content_text.style.width = '0';
                content_text.style.display = 'none';
                preview.style.width = '95vw';
                return preview.style.display = 'block';
              } else if (!checkBox2.checked && checkBox1.checked) {
                content_text.style.width = '95vw';
                content_text.style.display = 'block';
                preview.style.width = '0';
                return preview.style.display = 'none';
              } else if (checkBox2.checked && checkBox1.checked) {
                content_text.style.width = '29.5vw';
                content_text.style.display = 'block';
                preview.style.width = 'calc(69.5vw - 48px)';
                return preview.style.display = 'block';
              } else {
                preview.style.display = 'none';
                return content_text.style.display = 'none';
              }
            };
          })(this);
          checkBox1.onchange();
          checkBox2.onchange();
          div.appendChild(checkBox1);
          div.appendChild(label1);
          div.appendChild(checkBox2);
          return div.appendChild(label2);
        };

        return LiveEdit;

      })();
      return liveEdit = new LiveEdit();
    })(this.document, new XMLHttpRequest());
  }

}).call(this);
